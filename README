# API de Transcrição

## 📚 Sobre o Projeto
A **API de Transcrição** é uma aplicação que processa arquivos de áudio para gerar transcrições automáticas e classificá-las tematicamente. Implementada com **Python** e **Flask**, a API utiliza o modelo **OpenAI Whisper** para processamento de áudio e se integra aos bancos de dados **MongoDB** e **MySQL**. Além disso, fornece suporte a autenticação JWT, gestão de usuários e permissões baseadas em roles.

Ideal para empresas ou desenvolvedores que precisam de uma solução pronta para transcrição de áudios e classificação de dados, a API prioriza escalabilidade e documentação adequada.

---

## 🌐 Documentação Interativa com Swagger
A API está documentada utilizando o **Swagger**, permitindo a visualização e teste dos endpoints diretamente pelo navegador. Após iniciar o servidor, acesse:

http://127.0.0.1:5000/apidocs/#/

### Funcionalidades do Swagger:
1. Listagem de todos os endpoints disponíveis.
2. Teste direto de chamadas HTTP (GET, POST, PUT, DELETE).
3. Visualização detalhada das entradas e saídas de cada endpoint.

Exemplo de como usar:
1. Acesse o link acima.
2. Clique em um endpoint listado.
3. Veja a descrição, parâmetros esperados e exemplos de respostas.
4. Execute uma requisição real inserindo os dados nos campos disponíveis.

---

## 🏗️ Arquitetura do Projeto

### Estrutura de Diretórios
A arquitetura do projeto foi desenhada para separar responsabilidades e facilitar a manutenção e escalabilidade.

```plaintext
src/
├── auth/                   # Módulo de autenticação
│   ├── auth_controller.py  # Controlador de autenticação
│   ├── auth_service.py     # Lógica de autenticação e autorização
├── database/               # Configuração dos bancos de dados
│   ├── mongo/              # Conexão com MongoDB
│   ├── mysql/              # Conexão com MySQL
├── models/                 # Modelos de dados
│   ├── transc_entity.py    # Modelo de transcrição
│   ├── user_entity.py      # Modelo de usuário
├── openai/                 # Integração com OpenAI
│   ├── openai_config.py
│   ├── openai_service.py
├── routes/                 # Rotas da API
├── transcription/          # Lógica para transcrição de áudio
├── tests/                  # Testes automatizados e arquivos de teste
├── utils/                  # Utilitários, como funções de permissões
├── main.py                 # Ponto de entrada do servidor
├── requirements.txt        # Dependências do projeto
├── .env                    # Configurações sensíveis do ambiente

Funcionalidades
1. Autenticação e Autorização
Autenticação JWT para login seguro.

Suporte a roles: admin e user.

Cadastro de novos usuários.

2. Transcrição de Áudio
Processa arquivos nos formatos .mp3, .wav, .ogg, e outros.

Classificação automática do conteúdo transcrito por categorias como Tecnologia, Saúde, Educação.

3. Gestão de Usuários
Listagem de usuários (apenas administradores).

Atualização e remoção de usuários.

4. Pesquisa Avançada
Filtros por palavras-chave e classificação de transcrições.

Paginação para listas grandes.

⚙️ Instalação e Configuração
Pré-requisitos
Python (3.8 ou superior)

MongoDB e MySQL

Chave de API da OpenAI

Passos para Instalação

bash
git clone https://github.com/seu-usuario/api_transcricao.git
cd api_transcricao/src

Crie um ambiente virtual:

bash
python -m venv venv
source venv/bin/activate  # Linux/MacOS
venv\Scripts\activate     # Windows

Instale as dependências:

bash
pip install -r requirements.txt

Configure o arquivo .env: Crie um arquivo .env na pasta src e adicione:

plaintext
OPENAI_API_KEY=<sua-chave-da-api>
JWT_SECRET_KEY=super-secreta

Inicie o servidor:

bash
python main.py
A API estará disponível em: http://localhost:5000.

Endpoints
Autenticação
POST /auth/register: Cadastro de usuário.

POST /auth/login: Login e obtenção de JWT.

Gestão de Usuários
GET /users: Lista usuários (apenas para admins).

PUT /users/<user_id>: Atualiza usuário.

DELETE /users/<user_id>: Deleta usuário.

Transcrição
POST /transcriptions/transcribe: Envia um arquivo de áudio para transcrição.

GET /transcriptions/: Lista todas as transcrições.

GET /transcriptions/<id>: Detalhes de uma transcrição específica.

PUT /transcriptions/<id>: Atualiza transcrição.

DELETE /transcriptions/<id>: Remove uma transcrição.

Testes:

Via Postman
Importe o arquivo JSON disponível no diretório tests/Api_transcricao-Teste.postman_collection.json.

Configure os tokens e IDs conforme necessário.

Execute as requisições para validar os endpoints.

instruções de teste - src/tests/readme

📄 Licença
Este projeto está licenciado sob os termos da licença MIT. Consulte o arquivo LICENSE para mais detalhes.